<?php
// +----------------------------------------------------------------------
// | CatchAdmin [Just Like ～ ]
// +----------------------------------------------------------------------
// | Copyright (c) 2017~2021 https://catchadmin.com All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( https://github.com/JaguarJack/catchadmin-laravel/blob/master/LICENSE.md )
// +----------------------------------------------------------------------
// | Author: JaguarJack [ njphper@gmail.com ]
// +----------------------------------------------------------------------

declare(strict_types=1);

namespace Catcher\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Arr;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * register
     *
     * @author CatchAdmin
     * @time 2021年07月25日
     * @return void
     */
    public function register()
    {
        if (config('catch')) {
            $this->dontReport = config('catch.exception.dont_report');

            $this->dontFlash = config('catch.exception.dont_flash');
        }
    }

    /**
     * prepareException
     *
     * @time 2021年09月23日
     * @param Throwable $e
     * @return FailedException
     */
    protected function prepareException(Throwable $e): FailedException
    {
        $e = parent::prepareException($e); // TODO: Change the autogenerated stub

        $message = $e->getMessage();

        if ($e instanceof NotFoundHttpException) {
            return new FailedException($message ?: 'route not found');
        }

        return new FailedException($message);
    }

    /**
     * Convert the given exception to an array.
     *
     * @param  \Throwable  $e
     * @return array
     */
    protected function convertExceptionToArray(Throwable $e): array
    {
        return config('app.debug') ? [
            'code' => $e->getCode(),
            'message' => $e->getMessage(),
            'exception' => get_class($e),
            'file' => $e->getFile(),
            'line' => $e->getLine(),
            'trace' => collect($e->getTrace())->map(function ($trace) {
                return Arr::except($trace, ['args']);
            })->all(),
        ] : [
            'code' => $e->getCode(),
            'message' => $this->isHttpException($e) ? $e->getMessage() : 'Server Error',
        ];
    }
}
